{"ast":null,"code":"var _jsxFileName = \"/Users/vamsiprasanna/Desktop/React/resort/src/context.js\";\nimport React, { Component } from 'react';\nimport items from './data';\nimport Client from './Contentful';\nClient.getEntries({\n  content_type: \"beachresortroom\"\n}).then(response => console.log(response.items));\nconst RoomContext = React.createContext(); //<RoomContext.Provider value={'hello'}\n\nclass RoomProvider extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      rooms: [],\n      sortedRooms: [],\n      featuredRooms: [],\n      loading: true,\n      type: \"all\",\n      capacity: 1,\n      price: 0,\n      minprice: 0,\n      maxprice: 0,\n      minsize: 0,\n      maxsize: 0,\n      pets: false,\n      breakfast: false\n    };\n\n    this.getData = async () => {\n      try {\n        let response = await Client.getEntries;\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    this.getRoom = slug => {\n      let tempRooms = [...this.state.rooms];\n      const room = tempRooms.find(room => room.slug === slug);\n      return room;\n    };\n\n    this.handleChange = event => {\n      const target = event.target;\n      const name = event.target.name;\n      const value = target.type === \"checkbox\" ? target.checked : target.value;\n      this.setState({\n        [name]: value\n      }, this.filterRooms);\n    };\n\n    this.filterRooms = () => {\n      let {\n        rooms,\n        type,\n        capacity,\n        price,\n        minsize,\n        maxsize,\n        breakfast,\n        pets\n      } = this.state; // all the rooms\n\n      let tempRooms = [...rooms]; // transform value\n\n      capacity = parseInt(capacity);\n      price = parseInt(price); //filter by type\n\n      if (type !== 'all') {\n        tempRooms = tempRooms.filter(room => room.type === type);\n      } //filter by capacity\n\n\n      if (capacity !== 1) {\n        tempRooms = tempRooms.filter(room => room.capacity >= capacity);\n      } //filter by price\n\n\n      tempRooms = tempRooms.filter(room => room.price <= price); //filter by size\n\n      tempRooms = tempRooms.filter(room => room.size >= minsize && room.size <= maxsize); //filter by breakfast\n\n      if (breakfast) {\n        tempRooms = tempRooms.filter(room => room.breakfast === true);\n      } //filter by pets\n\n\n      if (pets) {\n        tempRooms = tempRooms.filter(room => room.pets === true);\n      } //change state\n\n\n      this.setState({\n        sortedRooms: tempRooms\n      });\n    };\n  }\n\n  componentDidMount() {\n    //this.getData\n    let rooms = this.formatData(items);\n    let featuredRooms = rooms.filter(room => room.featured === true);\n    let maxprice = Math.max(...rooms.map(item => item.price));\n    let maxsize = Math.max(...rooms.map(item => item.size));\n    this.setState({\n      rooms,\n      featuredRooms,\n      sortedRooms: rooms,\n      loading: false,\n      price: maxprice,\n      maxprice,\n      maxsize\n    });\n  }\n\n  formatData(items) {\n    let tempItems = items.map(item => {\n      let id = item.sys.id;\n      let images = item.fields.images.map(image => image.fields.file.url);\n      let room = { ...item.fields,\n        images,\n        id\n      };\n      return room;\n    });\n    return tempItems;\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(RoomContext.Provider, {\n      value: { ...this.state,\n        getRoom: this.getRoom,\n        handleChange: this.handleChange\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 13\n      }\n    }, this.props.children);\n  }\n\n}\n\nconst RoomConsumer = RoomContext.Consumer;\nexport function withRoomConsumer(Component) {\n  return function ConsumerWrapper(props) {\n    return /*#__PURE__*/React.createElement(RoomConsumer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 16\n      }\n    }, value => /*#__PURE__*/React.createElement(Component, Object.assign({}, props, {\n      context: value,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 23\n      }\n    })));\n  };\n}\nexport { RoomProvider, RoomConsumer, RoomContext };","map":{"version":3,"sources":["/Users/vamsiprasanna/Desktop/React/resort/src/context.js"],"names":["React","Component","items","Client","getEntries","content_type","then","response","console","log","RoomContext","createContext","RoomProvider","state","rooms","sortedRooms","featuredRooms","loading","type","capacity","price","minprice","maxprice","minsize","maxsize","pets","breakfast","getData","error","getRoom","slug","tempRooms","room","find","handleChange","event","target","name","value","checked","setState","filterRooms","parseInt","filter","size","componentDidMount","formatData","featured","Math","max","map","item","tempItems","id","sys","images","fields","image","file","url","render","props","children","RoomConsumer","Consumer","withRoomConsumer","ConsumerWrapper"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport items from './data'\nimport Client from './Contentful';\nClient.getEntries({\n    content_type: \"beachresortroom\"\n})\n.then((response) => console.log(response.items));\n\n\nconst RoomContext = React.createContext();\n//<RoomContext.Provider value={'hello'}\n\nclass RoomProvider extends Component {\n    state = {\n    rooms: [],\n    sortedRooms: [],\n    featuredRooms: [],\n    loading: true,\n    type: \"all\",\n    capacity:1,\n    price:0,\n    minprice:0,\n    maxprice:0,\n    minsize:0,\n    maxsize:0,\n    pets:false,\n    breakfast:false\n    };\n    //getData\n    getData = async () =>{\n        try{\n       let response = await Client.getEntries\n        } catch (error){\n            console.log(error);\n        }\n    }\n\n    componentDidMount(){\n        //this.getData\n        let rooms = this.formatData(items);\n        let featuredRooms = rooms.filter(room => room.featured === true);\n        let maxprice = Math.max(...rooms.map(item => item.price));\n        let maxsize = Math.max(...rooms.map(item => item.size));\n\n        this.setState({\n            rooms,featuredRooms,\n            sortedRooms:rooms,\n            loading: false,\n            price:maxprice,\n            maxprice,\n            maxsize\n\n        })\n    }\n    formatData(items){\n        let tempItems = items.map(item => {\n            let id= item.sys.id\n            let images = item.fields.images.map(image => image.fields.file.url);\n            let room = {...item.fields,images,id}\n            return room;\n        });\n        return  tempItems;\n    }\n    getRoom = (slug) => {\n        let tempRooms = [...this.state.rooms];\n        const room = tempRooms.find(room => room.slug === slug);\n        return room;\n    };\n    handleChange = event => {\n        const target = event.target\n        const name = event.target.name\n        const value = target.type === \"checkbox\" ?  target.checked : target.value;\n        this.setState(\n            {\n             [name]:value\n        }, \n        this.filterRooms\n        )\n    };\n    filterRooms = () =>{\n        let{\n            rooms, type, capacity, price, minsize, maxsize, breakfast, pets}\n            = this.state;\n            // all the rooms\n        let tempRooms = [...rooms];\n        // transform value\n        capacity = parseInt(capacity);\n        price = parseInt(price);\n        //filter by type\n        if(type !== 'all'){\n            tempRooms = tempRooms.filter(room => room.type === type);\n        }\n        //filter by capacity\n        if(capacity !==1){\n            tempRooms = tempRooms.filter(room =>room.capacity >= capacity)\n        }\n        //filter by price\n        tempRooms = tempRooms.filter(room => room.price <= price);\n        //filter by size\n        tempRooms = tempRooms.filter(room => room.size \n            >= minsize && room.size <= maxsize);\n            //filter by breakfast\n            if(breakfast){\n                tempRooms = tempRooms.filter(room => room.breakfast === true)\n            }\n            //filter by pets\n            if(pets){\n                tempRooms = tempRooms.filter(room => room.pets === true)\n            }\n        //change state\n        this.setState({\n            sortedRooms:tempRooms\n        })\n    };\n    \n    render() {\n        return (\n            <RoomContext.Provider value={{...this.state,\n            getRoom: this.getRoom, handleChange: this.handleChange }}>\n                {this.props.children}\n            </RoomContext.Provider>\n        );\n    }\n}\n\nconst RoomConsumer = RoomContext.Consumer;\n\nexport function withRoomConsumer(Component){\n    return function  ConsumerWrapper(props){\n        return <RoomConsumer>\n            {value => <Component {...props} context={value}/>}\n        </RoomConsumer>\n    }\n}\n\nexport {RoomProvider, RoomConsumer, RoomContext};\n"]},"metadata":{},"sourceType":"module"}