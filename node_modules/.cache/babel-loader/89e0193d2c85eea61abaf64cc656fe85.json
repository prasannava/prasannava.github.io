{"ast":null,"code":"var _jsxFileName = \"/Users/vamsiprasanna/Desktop/React/resort/src/context.js\";\nimport React, { Component } from 'react';\nimport items from './data';\nimport Client from './Contentful';\nconst RoomContext = React.createContext(); //<RoomContext.Provider value={'hello'}\n\nclass RoomProvider extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      rooms: [],\n      sortedRooms: [],\n      featuredRooms: [],\n      loading: true,\n      type: \"all\",\n      capacity: 1,\n      price: 0,\n      minprice: 0,\n      maxprice: 0,\n      minsize: 0,\n      maxsize: 0,\n      pets: false,\n      breakfast: false\n    };\n\n    this.getData = async () => {\n      try {\n        let response = await Client.getEntries({\n          content_type: \"beachresortroomexample\",\n          order: \"sys.createdAt\"\n        });\n        let rooms = this.formatData(response.items);\n        let featuredRooms = rooms.filter(room => room.featured === true);\n        let maxPrice = Math.max(...rooms.map(item => item.price));\n        let maxSize = Math.max(...rooms.map(item => item.size));\n        this.setState({\n          rooms,\n          featuredRooms,\n          sortedRooms: rooms,\n          loading: false,\n          price: maxPrice,\n          maxPrice,\n          maxSize\n        });\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    this.getRoom = slug => {\n      let tempRooms = [...this.state.rooms];\n      const room = tempRooms.find(room => room.slug === slug);\n      return room;\n    };\n\n    this.handleChange = event => {\n      const target = event.target;\n      const name = event.target.name;\n      const value = target.type === \"checkbox\" ? target.checked : target.value;\n      this.setState({\n        [name]: value\n      }, this.filterRooms);\n    };\n\n    this.filterRooms = () => {\n      let {\n        rooms,\n        type,\n        capacity,\n        price,\n        minsize,\n        maxsize,\n        breakfast,\n        pets\n      } = this.state; // all the rooms\n\n      let tempRooms = [...rooms]; // transform value\n\n      capacity = parseInt(capacity);\n      price = parseInt(price); //filter by type\n\n      if (type !== 'all') {\n        tempRooms = tempRooms.filter(room => room.type === type);\n      } //filter by capacity\n\n\n      if (capacity !== 1) {\n        tempRooms = tempRooms.filter(room => room.capacity >= capacity);\n      } //filter by price\n\n\n      tempRooms = tempRooms.filter(room => room.price <= price); //filter by size\n\n      tempRooms = tempRooms.filter(room => room.size >= minsize && room.size <= maxsize); //filter by breakfast\n\n      if (breakfast) {\n        tempRooms = tempRooms.filter(room => room.breakfast === true);\n      } //filter by pets\n\n\n      if (pets) {\n        tempRooms = tempRooms.filter(room => room.pets === true);\n      } //change state\n\n\n      this.setState({\n        sortedRooms: tempRooms\n      });\n    };\n  }\n\n  componentDidMount() {\n    //this.getData()  \n    let rooms = this.formatData(items);\n    let featuredRooms = rooms.filter(room => room.featured === true);\n    let maxPrice = Math.max(...rooms.map(item => item.price));\n    let maxSize = Math.max(...rooms.map(item => item.size));\n    this.setState({\n      rooms,\n      featuredRooms,\n      sortedRooms: rooms,\n      loading: false,\n      price: maxPrice,\n      maxPrice,\n      maxSize\n    });\n  }\n\n  formatData(items) {\n    let tempItems = items.map(item => {\n      let id = item.sys.id;\n      let images = item.fields.images.map(image => image.fields.file.url);\n      let room = { ...item.fields,\n        images,\n        id\n      };\n      return room;\n    });\n    return tempItems;\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(RoomContext.Provider, {\n      value: { ...this.state,\n        getRoom: this.getRoom,\n        handleChange: this.handleChange\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 13\n      }\n    }, this.props.children);\n  }\n\n}\n\nconst RoomConsumer = RoomContext.Consumer;\nexport function withRoomConsumer(Component) {\n  return function ConsumerWrapper(props) {\n    return /*#__PURE__*/React.createElement(RoomConsumer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 16\n      }\n    }, value => /*#__PURE__*/React.createElement(Component, Object.assign({}, props, {\n      context: value,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 23\n      }\n    })));\n  };\n}\nexport { RoomProvider, RoomConsumer, RoomContext };","map":{"version":3,"sources":["/Users/vamsiprasanna/Desktop/React/resort/src/context.js"],"names":["React","Component","items","Client","RoomContext","createContext","RoomProvider","state","rooms","sortedRooms","featuredRooms","loading","type","capacity","price","minprice","maxprice","minsize","maxsize","pets","breakfast","getData","response","getEntries","content_type","order","formatData","filter","room","featured","maxPrice","Math","max","map","item","maxSize","size","setState","error","console","log","getRoom","slug","tempRooms","find","handleChange","event","target","name","value","checked","filterRooms","parseInt","componentDidMount","tempItems","id","sys","images","fields","image","file","url","render","props","children","RoomConsumer","Consumer","withRoomConsumer","ConsumerWrapper"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,QAAlB;AACA,OAAOC,MAAP,MAAmB,cAAnB;AAEA,MAAMC,WAAW,GAAGJ,KAAK,CAACK,aAAN,EAApB,C,CACA;;AAEA,MAAMC,YAAN,SAA2BL,SAA3B,CAAqC;AAAA;AAAA;AAAA,SACjCM,KADiC,GACzB;AACRC,MAAAA,KAAK,EAAE,EADC;AAERC,MAAAA,WAAW,EAAE,EAFL;AAGRC,MAAAA,aAAa,EAAE,EAHP;AAIRC,MAAAA,OAAO,EAAE,IAJD;AAKRC,MAAAA,IAAI,EAAE,KALE;AAMRC,MAAAA,QAAQ,EAAC,CAND;AAORC,MAAAA,KAAK,EAAC,CAPE;AAQRC,MAAAA,QAAQ,EAAC,CARD;AASRC,MAAAA,QAAQ,EAAC,CATD;AAURC,MAAAA,OAAO,EAAC,CAVA;AAWRC,MAAAA,OAAO,EAAC,CAXA;AAYRC,MAAAA,IAAI,EAAC,KAZG;AAaRC,MAAAA,SAAS,EAAC;AAbF,KADyB;;AAAA,SAiBjCC,OAjBiC,GAiBvB,YAAW;AACjB,UAAI;AACA,YAAIC,QAAQ,GAAG,MAAMnB,MAAM,CAACoB,UAAP,CAAkB;AACnCC,UAAAA,YAAY,EAAE,wBADqB;AAEnCC,UAAAA,KAAK,EAAE;AAF4B,SAAlB,CAArB;AAIA,YAAIjB,KAAK,GAAG,KAAKkB,UAAL,CAAgBJ,QAAQ,CAACpB,KAAzB,CAAZ;AACR,YAAIQ,aAAa,GAAGF,KAAK,CAACmB,MAAN,CAAaC,IAAI,IAAIA,IAAI,CAACC,QAAL,KAAkB,IAAvC,CAApB;AAEA,YAAIC,QAAQ,GAAGC,IAAI,CAACC,GAAL,CAAS,GAAGxB,KAAK,CAACyB,GAAN,CAAUC,IAAI,IAAIA,IAAI,CAACpB,KAAvB,CAAZ,CAAf;AACA,YAAIqB,OAAO,GAAGJ,IAAI,CAACC,GAAL,CAAS,GAAGxB,KAAK,CAACyB,GAAN,CAAUC,IAAI,IAAIA,IAAI,CAACE,IAAvB,CAAZ,CAAd;AACA,aAAKC,QAAL,CAAc;AACZ7B,UAAAA,KADY;AAEZE,UAAAA,aAFY;AAGZD,UAAAA,WAAW,EAAED,KAHD;AAIZG,UAAAA,OAAO,EAAE,KAJG;AAMZG,UAAAA,KAAK,EAAEgB,QANK;AAOZA,UAAAA,QAPY;AAQZK,UAAAA;AARY,SAAd;AAaK,OAvBD,CAuBE,OAAOG,KAAP,EAAc;AACZC,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH;AACJ,KA5CgC;;AAAA,SA2EjCG,OA3EiC,GA2EtBC,IAAD,IAAU;AAChB,UAAIC,SAAS,GAAG,CAAC,GAAG,KAAKpC,KAAL,CAAWC,KAAf,CAAhB;AACA,YAAMoB,IAAI,GAAGe,SAAS,CAACC,IAAV,CAAehB,IAAI,IAAIA,IAAI,CAACc,IAAL,KAAcA,IAArC,CAAb;AACA,aAAOd,IAAP;AACH,KA/EgC;;AAAA,SAgFjCiB,YAhFiC,GAgFlBC,KAAK,IAAI;AACpB,YAAMC,MAAM,GAAGD,KAAK,CAACC,MAArB;AACA,YAAMC,IAAI,GAAGF,KAAK,CAACC,MAAN,CAAaC,IAA1B;AACA,YAAMC,KAAK,GAAGF,MAAM,CAACnC,IAAP,KAAgB,UAAhB,GAA8BmC,MAAM,CAACG,OAArC,GAA+CH,MAAM,CAACE,KAApE;AACA,WAAKZ,QAAL,CACI;AACC,SAACW,IAAD,GAAOC;AADR,OADJ,EAIA,KAAKE,WAJL;AAMH,KA1FgC;;AAAA,SA2FjCA,WA3FiC,GA2FnB,MAAK;AACf,UAAG;AACC3C,QAAAA,KADD;AACQI,QAAAA,IADR;AACcC,QAAAA,QADd;AACwBC,QAAAA,KADxB;AAC+BG,QAAAA,OAD/B;AACwCC,QAAAA,OADxC;AACiDE,QAAAA,SADjD;AAC4DD,QAAAA;AAD5D,UAEG,KAAKZ,KAFX,CADe,CAIX;;AACJ,UAAIoC,SAAS,GAAG,CAAC,GAAGnC,KAAJ,CAAhB,CALe,CAMf;;AACAK,MAAAA,QAAQ,GAAGuC,QAAQ,CAACvC,QAAD,CAAnB;AACAC,MAAAA,KAAK,GAAGsC,QAAQ,CAACtC,KAAD,CAAhB,CARe,CASf;;AACA,UAAGF,IAAI,KAAK,KAAZ,EAAkB;AACd+B,QAAAA,SAAS,GAAGA,SAAS,CAAChB,MAAV,CAAiBC,IAAI,IAAIA,IAAI,CAAChB,IAAL,KAAcA,IAAvC,CAAZ;AACH,OAZc,CAaf;;;AACA,UAAGC,QAAQ,KAAI,CAAf,EAAiB;AACb8B,QAAAA,SAAS,GAAGA,SAAS,CAAChB,MAAV,CAAiBC,IAAI,IAAGA,IAAI,CAACf,QAAL,IAAiBA,QAAzC,CAAZ;AACH,OAhBc,CAiBf;;;AACA8B,MAAAA,SAAS,GAAGA,SAAS,CAAChB,MAAV,CAAiBC,IAAI,IAAIA,IAAI,CAACd,KAAL,IAAcA,KAAvC,CAAZ,CAlBe,CAmBf;;AACA6B,MAAAA,SAAS,GAAGA,SAAS,CAAChB,MAAV,CAAiBC,IAAI,IAAIA,IAAI,CAACQ,IAAL,IAC9BnB,OAD8B,IACnBW,IAAI,CAACQ,IAAL,IAAalB,OADnB,CAAZ,CApBe,CAsBX;;AACA,UAAGE,SAAH,EAAa;AACTuB,QAAAA,SAAS,GAAGA,SAAS,CAAChB,MAAV,CAAiBC,IAAI,IAAIA,IAAI,CAACR,SAAL,KAAmB,IAA5C,CAAZ;AACH,OAzBU,CA0BX;;;AACA,UAAGD,IAAH,EAAQ;AACJwB,QAAAA,SAAS,GAAGA,SAAS,CAAChB,MAAV,CAAiBC,IAAI,IAAIA,IAAI,CAACT,IAAL,KAAc,IAAvC,CAAZ;AACH,OA7BU,CA8Bf;;;AACA,WAAKkB,QAAL,CAAc;AACV5B,QAAAA,WAAW,EAACkC;AADF,OAAd;AAGH,KA7HgC;AAAA;;AA6ChCU,EAAAA,iBAAiB,GAAE;AAChB;AACA,QAAI7C,KAAK,GAAG,KAAKkB,UAAL,CAAgBxB,KAAhB,CAAZ;AACJ,QAAIQ,aAAa,GAAGF,KAAK,CAACmB,MAAN,CAAaC,IAAI,IAAIA,IAAI,CAACC,QAAL,KAAkB,IAAvC,CAApB;AAEA,QAAIC,QAAQ,GAAGC,IAAI,CAACC,GAAL,CAAS,GAAGxB,KAAK,CAACyB,GAAN,CAAUC,IAAI,IAAIA,IAAI,CAACpB,KAAvB,CAAZ,CAAf;AACA,QAAIqB,OAAO,GAAGJ,IAAI,CAACC,GAAL,CAAS,GAAGxB,KAAK,CAACyB,GAAN,CAAUC,IAAI,IAAIA,IAAI,CAACE,IAAvB,CAAZ,CAAd;AACA,SAAKC,QAAL,CAAc;AACZ7B,MAAAA,KADY;AAEZE,MAAAA,aAFY;AAGZD,MAAAA,WAAW,EAAED,KAHD;AAIZG,MAAAA,OAAO,EAAE,KAJG;AAMZG,MAAAA,KAAK,EAAEgB,QANK;AAOZA,MAAAA,QAPY;AAQZK,MAAAA;AARY,KAAd;AAUD;;AAICT,EAAAA,UAAU,CAACxB,KAAD,EAAO;AACb,QAAIoD,SAAS,GAAGpD,KAAK,CAAC+B,GAAN,CAAUC,IAAI,IAAI;AAC9B,UAAIqB,EAAE,GAAErB,IAAI,CAACsB,GAAL,CAASD,EAAjB;AACA,UAAIE,MAAM,GAAGvB,IAAI,CAACwB,MAAL,CAAYD,MAAZ,CAAmBxB,GAAnB,CAAuB0B,KAAK,IAAIA,KAAK,CAACD,MAAN,CAAaE,IAAb,CAAkBC,GAAlD,CAAb;AACA,UAAIjC,IAAI,GAAG,EAAC,GAAGM,IAAI,CAACwB,MAAT;AAAgBD,QAAAA,MAAhB;AAAuBF,QAAAA;AAAvB,OAAX;AACA,aAAO3B,IAAP;AACH,KALe,CAAhB;AAMA,WAAQ0B,SAAR;AACH;;AAqDDQ,EAAAA,MAAM,GAAG;AACL,wBACI,oBAAC,WAAD,CAAa,QAAb;AAAsB,MAAA,KAAK,EAAE,EAAC,GAAG,KAAKvD,KAAT;AAC7BkC,QAAAA,OAAO,EAAE,KAAKA,OADe;AACNI,QAAAA,YAAY,EAAE,KAAKA;AADb,OAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEK,KAAKkB,KAAL,CAAWC,QAFhB,CADJ;AAMH;;AAtIgC;;AAyIrC,MAAMC,YAAY,GAAG7D,WAAW,CAAC8D,QAAjC;AAEA,OAAO,SAASC,gBAAT,CAA0BlE,SAA1B,EAAoC;AACvC,SAAO,SAAUmE,eAAV,CAA0BL,KAA1B,EAAgC;AACnC,wBAAO,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACFd,KAAK,iBAAI,oBAAC,SAAD,oBAAec,KAAf;AAAsB,MAAA,OAAO,EAAEd,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADP,CAAP;AAGH,GAJD;AAKH;AAED,SAAQ3C,YAAR,EAAsB2D,YAAtB,EAAoC7D,WAApC","sourcesContent":["import React, { Component } from 'react';\nimport items from './data'\nimport Client from './Contentful';\n\nconst RoomContext = React.createContext();\n//<RoomContext.Provider value={'hello'}\n\nclass RoomProvider extends Component {\n    state = {\n    rooms: [],\n    sortedRooms: [],\n    featuredRooms: [],\n    loading: true,\n    type: \"all\",\n    capacity:1,\n    price:0,\n    minprice:0,\n    maxprice:0,\n    minsize:0,\n    maxsize:0,\n    pets:false,\n    breakfast:false\n    };\n    //getData\n    getData = async () =>{\n        try {\n            let response = await Client.getEntries({\n                content_type: \"beachresortroomexample\",\n                order: \"sys.createdAt\"\n            });\n            let rooms = this.formatData(response.items);\n    let featuredRooms = rooms.filter(room => room.featured === true);\n    \n    let maxPrice = Math.max(...rooms.map(item => item.price));\n    let maxSize = Math.max(...rooms.map(item => item.size));\n    this.setState({\n      rooms,\n      featuredRooms,\n      sortedRooms: rooms,\n      loading: false,\n      \n      price: maxPrice,\n      maxPrice,\n      maxSize\n    });\n        \n  \n\n        } catch (error) {\n            console.log(error);\n        }\n    }\n     componentDidMount(){\n        //this.getData()  \n        let rooms = this.formatData(items);\n    let featuredRooms = rooms.filter(room => room.featured === true);\n    \n    let maxPrice = Math.max(...rooms.map(item => item.price));\n    let maxSize = Math.max(...rooms.map(item => item.size));\n    this.setState({\n      rooms,\n      featuredRooms,\n      sortedRooms: rooms,\n      loading: false,\n      \n      price: maxPrice,\n      maxPrice,\n      maxSize\n    }); \n  }\n\n       \n    \n    formatData(items){\n        let tempItems = items.map(item => {\n            let id= item.sys.id\n            let images = item.fields.images.map(image => image.fields.file.url);\n            let room = {...item.fields,images,id}\n            return room;\n        });\n        return  tempItems;\n    }\n    getRoom = (slug) => {\n        let tempRooms = [...this.state.rooms];\n        const room = tempRooms.find(room => room.slug === slug);\n        return room;\n    };\n    handleChange = event => {\n        const target = event.target\n        const name = event.target.name\n        const value = target.type === \"checkbox\" ?  target.checked : target.value;\n        this.setState(\n            {\n             [name]:value\n        }, \n        this.filterRooms\n        )\n    };\n    filterRooms = () =>{\n        let{\n            rooms, type, capacity, price, minsize, maxsize, breakfast, pets}\n            = this.state;\n            // all the rooms\n        let tempRooms = [...rooms];\n        // transform value\n        capacity = parseInt(capacity);\n        price = parseInt(price);\n        //filter by type\n        if(type !== 'all'){\n            tempRooms = tempRooms.filter(room => room.type === type);\n        }\n        //filter by capacity\n        if(capacity !==1){\n            tempRooms = tempRooms.filter(room =>room.capacity >= capacity)\n        }\n        //filter by price\n        tempRooms = tempRooms.filter(room => room.price <= price);\n        //filter by size\n        tempRooms = tempRooms.filter(room => room.size \n            >= minsize && room.size <= maxsize);\n            //filter by breakfast\n            if(breakfast){\n                tempRooms = tempRooms.filter(room => room.breakfast === true)\n            }\n            //filter by pets\n            if(pets){\n                tempRooms = tempRooms.filter(room => room.pets === true)\n            }\n        //change state\n        this.setState({\n            sortedRooms:tempRooms\n        })\n    };\n    \n    render() {\n        return (\n            <RoomContext.Provider value={{...this.state,\n            getRoom: this.getRoom, handleChange: this.handleChange }}>\n                {this.props.children}\n            </RoomContext.Provider>\n        );\n    }\n}\n\nconst RoomConsumer = RoomContext.Consumer;\n\nexport function withRoomConsumer(Component){\n    return function  ConsumerWrapper(props){\n        return <RoomConsumer>\n            {value => <Component {...props} context={value}/>}\n        </RoomConsumer>\n    }\n}\n\nexport {RoomProvider, RoomConsumer, RoomContext};\n"]},"metadata":{},"sourceType":"module"}